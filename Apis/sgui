-- Points --

local pointMeta = { }

pointMeta.__index = pointMeta

function point( X, Y )
	local p = {
		x = X,
		y = Y
	}
	
	return setmetatable( p, pointMeta )
end

function pointMeta:__tostring( )
	return "X: " .. self.x .. "\nY: " .. self.y
end

-- Rects --

local rectMeta = { }

rectMeta.__index = rectMeta

function rect( p1, p2 )
	local r = {
		x1 = p1.x,
		y1 = p1.y,
		x2 = p2.x,
		y2 = p2.y
	}
	
	return setmetatable( r, rectMeta )
end

function rectMeta:__tostring( )
	return "X1: " .. self.x1 .. "\nY1: " .. self.y1 .. "\nX2: " .. self.x2 .. "\nY2: " .. self.y2
end

-- Buttons --

local buttonMeta = { }

buttonMeta.__index = buttonMeta

function button( R, COL, LAB )
	local b = {
		r = R,
		col = COL,
		lab = LAB
	}
	
	return setmetatable( b, buttonMeta )
end

function buttonMeta:draw( per )
	per.setBackgroundColour( self.col )
	for x = self.r.x1, self.r.x2 do
		for y = self.r.y1, self.r.y2 do
			per.setCursorPos( x, y )
			per.write( " " )
		end
	end
	local xpos = self.r.x1 + math.ceil( ( self.r.x2 - self.r.x1 ) / 2 ) - math.ceil( #self.lab / 2 )
	local ypos = self.r.y1 + math.floor( ( self.r.y2 - self.r.y1 ) / 2 )
	per.setCursorPos( xpos, ypos )
	per.write( self.lab )
end

-- Tables --

tableMeta = { }

tableMeta.__index = tableMeta

function newTable( R, S )
	local t = {
		r = R,
		s = S
	}
	
	return setmetatable( t, tableMeta )
end

function tableMeta:draw( per )

	-- Draw Horizontal --

	for x = self.r.x1, self.r.x2 do
		per.setCursorPos( x, self.r.y1 )
		per.write( "=" )
	end
	
	for x = self.r.x1, self.r.x2 do
		per.setCursorPos( x, self.r.y2 )
		per.write( "=" )
	end
	
	-- Draw Vertical --
	
	for y = self.r.y1, self.r.y2 do
		per.setCursorPos( self.r.x1, y )
		per.write( "|" )
	end
	
	for y = self.r.y1, self.r.y2 do
		per.setCursorPos( self.r.x2, y )
		per.write( "|" )
	end
	
	for y = self.r.y1, self.r.y2 do
		per.setCursorPos( self.r.x1 + self.s + 1, y )
		per.write( "|" )
	end
	
	-- Draw Intersections --
	
	per.setCursorPos( self.r.x1, self.r.y1 )
	per.write( "+" )
	
	per.setCursorPos( self.r.x1, self.r.y2 )
	per.write( "+" )
	
	per.setCursorPos( self.r.x2, self.r.y1 )
	per.write( "+" )
	
	per.setCursorPos( self.r.x2, self.r.y2 )
	per.write( "+" )
	
		-- Seperator Intersections --
	
	per.setCursorPos( self.r.x1 + self.s + 1, self.r.y1 )
	per.write( "+" )
	
	per.setCursorPos( self.r.x1 + self.s + 1, self.r.y2 )
	per.write( "+" )
end

-- Other --

function printCentered( per, str, ypos )
        pw, pl = per.getSize( )
        per.setCursorPos( ( ( pw / 2 ) - ( #str / 2 ) ), ypos )
        per.write( str )
end

function drawHeader( per, str )
        pw, pl = per.getSize( )
        printCentered( per, str, 1 )
        per.setCursorPos( 1, 2 )
        write( string.rep( "=", pw ) )
end

function addSpaces( str, len )
        str = str .. string.rep( " ", len - #str )
end

function clearScreen( per )
        per.clear( )
        per.setCursorPos( 1, 1 )
end

function fillBackground( per, str, col )
        pw, pl = per.getSize( )
        for x = 1, pw do
                for y = 1, pl do
                        per.setCursorPos( x, y )
                        per.setBackgroundColour( col )
                        write( str )
                end
        end
end

function drawWindow( per, str, col, rect )
        per.setCursorPos( rect.x1, rect.y1 )
        per.setBackgroundColour( col )
        for x = rect.x1, rect.x2 do
                for y = rect.y1, rect.y2 do
                        per.setCursorPos( x, y )
                        per.write( " " )
                end
        end
        per.setCursorPos( rect.x1, rect.y1 )
        per.write( str )
end

function drawIMG( per, img, x, y )
        for i = 1, #img do
                per.setCursorPos( x, y - 1 + i )
                per.write( img[ i ] )
        end
end

function drawAnim( per, anim, x, y, delay )
        while true do
                for i = 1, #anim do
                        for n = 1, #anim[ i ] do
                                per.setCursorPos( x, y - 1 + n )
                                per.write( anim[ i ][ n ] )
                        end
                        sleep( delay )
                end
        end
end

function drawCircle( per, col, p, r )
        per.setBackgroundColour( col )
        for i = 1, 360 do
                per.setCursorPos( p.x + ( math.sin( i ) * r ), p.y + ( math.cos( i ) * r ) )
                per.write( " " )
        end
end

function drawProgressBar( per, x, y, wi, len, fill )
        pw, pl = per.getSize( )
        per.setBackgroundColour( colours.red )
        for i = 1, wi do
                for n = 1, len do
                        per.setCursorPos( ( x - 1 ) + i, ( y - 1 ) + n )
                        per.write( " " )
                end
        end
        per.setBackgroundColour( colours.lime )
        for i = 1, math.ceil( ( wi / 100 ) * fill ) do
                for n = 1, len do
                        per.setCursorPos( ( x - 1 ) + i, ( y - 1 ) + n )
                        per.write( " " )
                end
        end
end

function inRange( x, y, rect )
	if ( x >= rect.x1 and x <= rect.x2 and y >= rect.y1 and y <= rect.y2 ) then
		return true
	else
		return false
	end
end

function printVertical( per, x, y, str )
	for i = 1, string.len( str ) do
		per.setCursorPos( x, y + i )
		ch = string.sub( str, i, i )
	end
end